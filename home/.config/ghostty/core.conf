# The size of the scrollback buffer in bytes.
# This also includes the active screen.
# No matter what this is set to,
# enough memory will always be allocated for the visible screen and anything leftover is the limit for the scrollback.
#
# When this limit is reached, the oldest lines are removed from the scrollback.
#
# Scrollback currently exists completely in memory.
# This means that the larger this value, the larger potential memory usage.
# Scrollback is allocated lazily up to this limit,
# so if you set this to a very large value,
# it will not immediately consume a lot of memory.
#
# This size is per terminal surface, not for the entire application.
#
# It is not currently possible to set an unlimited scrollback buffer.
# This is a future planned feature.
#
# This can be changed at runtime but will only affect new terminal surfaces.
scrollback-limit = 10000000

# The total amount of bytes that can be used for image data (i.e. the Kitty image protocol) per terminal screen.
# The maximum value is 4,294,967,295 (4GiB).
# The default is 320MB.
# If this is set to zero, then all image protocols will be disabled.
#
# This value is separate for primary and alternate screens so the effective limit per surface is double.
image-storage-limit = 320000000

# When this is true, the default configuration file paths will be loaded.
# The default configuration file paths are currently only the XDG config path ($XDG_CONFIG_HOME/ghostty/config).
#
# If this is false, the default configuration paths will not be loaded.
# This is targeted directly at using Ghostty from the CLI in a way that minimizes external effects.
#
# This is a CLI-only configuration.
# Setting this in a configuration file will have no effect.
# It is not an error, but it will not do anything.
# This configuration can only be set via CLI arguments.
config-default-files = true

# Whether to enable shell integration auto-injection or not.
# Shell integration greatly enhances the terminal experience by enabling a number of features:
#
#   * Working directory reporting so new tabs,
#     splits inherit the previous terminal's working directory.
#
#   * Prompt marking that enables the "jump_to_prompt" keybinding.
#
#   * If you're sitting at a prompt, closing a terminal will not ask for confirmation.
#
#   * Resizing the window with a complex prompt usually paints much better.
#
# Allowable values are:
#
#   * `none` - Do not do any automatic injection.
#     You can still manually configure your shell to enable the integration.
#
#   * `detect` - Detect the shell based on the filename.
#
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
#
# The default value is `detect`.
shell-integration = zsh

# Shell integration features to enable if shell integration itself is enabled.
# The format of this is a list of features to enable separated by commas.
# If you prefix a feature with `no-` then it is disabled.
# If you omit a feature, its default value is used, so you must explicitly disable features you don't want.
# You can also use `true` or `false` to turn all features on or off.
#
# Available features:
#
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
#
#   * `sudo` - Set sudo wrapper to preserve terminfo.
#
#   * `title` - Set the window title via shell integration.
#
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
shell-integration-features = no-cursor,sudo,title

# Sets the reporting format for OSC sequences that request color information.
# Ghostty currently supports OSC 10 (foreground),
# OSC 11 (background),
# and OSC 4 (256 color palette) queries,
# and by default the reported values are scaled-up RGB values,
# where each component are 16 bits.
# This is how most terminals report these values.
# However, some legacy applications may require 8-bit, unscaled, components.
# We also support turning off reporting altogether.
# The components are lowercase hex values.
#
# Allowable values are:
#
#   * `none` - OSC 4/10/11 queries receive no reply
#
#   * `8-bit` - Color components are return unscaled, i.e. `rr/gg/bb`
#
#   * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`
#
# The default value is `16-bit`.
osc-color-report-format = 16-bit

# If true, allows the "KAM" mode (ANSI mode 2) to be used within the terminal.
# KAM disables keyboard input at the request of the application.
# This is not a common feature and is not recommended to be enabled.
# This will not be documented further because if you know you need KAM, you know.
# If you don't know if you need KAM, you don't need it.
vt-kam-allowed = false

# Custom shaders to run after the default shaders.
# This is a file path to a GLSL-syntax shader for all platforms.
#
# Warning: Invalid shaders can cause Ghostty to become unusable such as by causing the window to be completely black.
# If this happens, you can unset this configuration to disable the shader.
#
# On Linux, this requires OpenGL 4.2.
# Ghostty typically only requires OpenGL 3.3,
# but custom shaders push that requirement up to 4.2.
#
# The shader API is identical to the Shadertoy API: you specify a `mainImage` function and the available uniforms match Shadertoy.
# The iChannel0 uniform is a texture containing the rendered terminal screen.
#
# If the shader fails to compile, the shader will be ignored.
# Any errors related to shader compilation will not show up as configuration errors and only show up in the log,
# since shader compilation happens after configuration loading on the dedicated render thread.
#  For interactive development, use [shadertoy.com](https://shadertoy.com).
#
# This can be repeated multiple times to load multiple shaders.
# The shaders will be run in the order they are specified.
#
# Changing this value at runtime and reloading the configuration will only affect new windows, tabs, and splits.
custom-shader =

# If `true` (default), the focused terminal surface will run an animation loop when custom shaders are used.
# This uses slightly more CPU (generally less than 10%) but allows the shader to animate.
# This only runs if there are custom shaders and the terminal is focused.
#
# If this is set to `false`, the terminal and custom shader will only render when the terminal is updated.
# This is more efficient but the shader will not animate.
#
# This can also be set to `always`, which will always run the animation loop regardless of whether the terminal is focused or not.
# The animation loop will still only run when custom shaders are used.
# Note that this will use more CPU per terminal surface and can become quite expensive depending on the shader and your terminal usage.
#
# This value can be changed at runtime and will affect all currently open terminals.
custom-shader-animation = false

# If `true` (default),
# applications running in the terminal can show desktop notifications using certain escape sequences such as OSC 9 or OSC 777.
desktop-notifications = true

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key protocols (specifically this will enable `modifyOtherKeys`), among other features.
# An option exists in vim to modify this: `:set keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it from working properly.
# https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty

# String to send when we receive `ENQ` (`0x05`) from the command that we are running.
# Defaults to an empty string if not set.
enquiry-response =
