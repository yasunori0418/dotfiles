# FreeType load flags to enable.
# The format of this is a list of flags to enable separated by commas.
# If you prefix a flag with `no-` then it is disabled.
# If you omit a flag, it's default value is used, so you must explicitly disable flags you don't want.
# You can also use `true` or `false` to turn all flags on or off.
#
# This configuration only applies to Ghostty builds that use FreeType.
# This is usually the case only for Linux builds.
# macOS uses CoreText and does not have an equivalent configuration.
#
# Available flags:
#
#   * `hinting` - Enable or disable hinting, enabled by default.
#   * `force-autohint` - Use the freetype auto-hinter rather than the font's native hinter.
#     Enabled by default.
#   * `monochrome` - Instructs renderer to use 1-bit monochrome rendering.
#     This option doesn't impact the hinter.
#     Enabled by default.
#   * `autohint` - Use the freetype auto-hinter. Enabled by default.
#
# Example: `hinting`, `no-hinting`, `force-autohint`, `no-force-autohint`
freetype-load-flags = hinting,force-autohint,monochrome,autohint

# The setting that will change the application class value.
#
# This controls the class field of the `WM_CLASS` X11 property (when running under X11),
# and the Wayland application ID (when running under Wayland).
#
# Note that changing this value between invocations will create new, separate instances, of Ghostty when running with `gtk-single-instance=true`.
# See that option for more details.
#
# The class name must follow the requirements defined [in the GTK documentation](https://docs.gtk.org/gio/type_func.Application.id_is_valid.html).
#
# The default is `com.mitchellh.ghostty`.
#
# This only affects GTK builds.
class =

# This controls the instance name field of the `WM_CLASS` X11 property when running under X11. It has no effect otherwise.
#
# The default is `ghostty`.
#
# This only affects GTK builds.
x11-instance-name =

# Put every surface (tab, split, window) into a dedicated Linux cgroup.
#
# This makes it so that resource management can be done on a per-surface granularity.
# For example, if a shell program is using too much memory, only that shell will be killed by the oom monitor instead of the entire Ghostty process.
# Similarly, if a shell program is using too much CPU, only that surface will be CPU-throttled.
#
# This will cause startup times to be slower (a hundred milliseconds or so),
# so the default value is "single-instance." In single-instance mode,
# only one instance of Ghostty is running (see gtk-single-instance) so the startup time is a one-time cost.
# Additionally, single instance Ghostty is much more likely to have many windows, tabs, etc.
# so cgroup isolation is a big benefit.
#
# This feature requires systemd.
# If systemd is unavailable, cgroup initialization will fail.
# By default, this will not prevent Ghostty from working (see linux-cgroup-hard-fail).
#
# Valid values are:
#
#   * `never` - Never use cgroups.
#   * `always` - Always use cgroups.
#   * `single-instance` - Enable cgroups only for Ghostty instances launched as single-instance applications (see gtk-single-instance).
#
linux-cgroup = single-instance

# Memory limit for any individual terminal process (tab, split, window, etc.) in bytes.
# If this is unset then no memory limit will be set.
#
# Note that this sets the "memory.high" configuration for the memory controller,
# which is a soft limit.
# You should configure something like systemd-oom to handle killing processes that have too much memory pressure.
linux-cgroup-memory-limit =

# Number of processes limit for any individual terminal process (tab, split, window, etc.). If this is unset then no limit will be set.
#
# Note that this sets the "pids.max" configuration for the process number controller, which is a hard limit.
linux-cgroup-processes-limit =

# If this is false, then any cgroup initialization (for linux-cgroup) will be allowed to fail and the failure is ignored.
# This is useful if you view cgroup isolation as a "nice to have" and not a critical resource management feature,
# because Ghostty startup will not fail if cgroup APIs fail.
#
# If this is true, then any cgroup initialization failure will cause Ghostty to exit or new surfaces to not be created.
#
# Note: This currently only affects cgroup initialization.
# Subprocesses must always be able to move themselves into an isolated cgroup.
linux-cgroup-hard-fail = false

# If `true`, the Ghostty GTK application will run in single-instance mode:
# each new `ghostty` process launched will result in a new window if there is already a running process.
#
# If `false`, each new ghostty process will launch a separate application.
#
# The default value is `detect` which will default to `true` if Ghostty detects that it was launched
# from the `.desktop` file such as an app launcher (like Gnome Shell)  or by D-Bus activation.
# If Ghostty is launched from the command line,
# it will default to `false`.
#
# Note that debug builds of Ghostty have a separate single-instance ID so you can test single instance without conflicting with release builds.
gtk-single-instance = false

# When enabled, the full GTK titlebar is displayed instead of your window manager's simple titlebar.
# The behavior of this option will vary with your window manager.
#
# This option does nothing when `window-decoration` is false or when running under macOS.
#
# Changing this value at runtime and reloading the configuration will only affect new windows.
gtk-titlebar = false

# Determines the side of the screen that the GTK tab bar will stick to.
# Top, bottom, left, right, and hidden are supported. The default is top.
#
# If this option has value `left` or `right` when using Adwaita, it falls back to `top`.
# `hidden`, meaning that tabs don't exist, is not supported without using Adwaita, falling back to `top`.
#
# When `hidden` is set and Adwaita is enabled, a tab button displaying the number of tabs will appear in the title bar.
# It has the ability to open a tab overview for displaying tabs. Alternatively,
# you can use the `toggle_tab_overview` action in a keybind if your window doesn't have a title bar,
# or you can switch tabs with keybinds.
gtk-tabs-location = hidden

# Determines the appearance of the top and bottom bars when using the Adwaita tab bar.
# This requires `gtk-adwaita` to be enabled (it is by default).
#
# Valid values are:
#
#  * `flat` - Top and bottom bars are flat with the terminal window.
#  * `raised` - Top and bottom bars cast a shadow on the terminal area.
#  * `raised-border` - Similar to `raised` but the shadow is replaced with a
#    more subtle border.
#
# Changing this value at runtime will only affect new windows.
adw-toolbar-style = flat

# If `true` (default), then the Ghostty GTK tabs will be "wide." Wide tabs are the new typical Gnome style where tabs fill their available space.
# If you set this to `false` then tabs will only take up space they need, which is the old style.
gtk-wide-tabs = true

# If `true` (default), Ghostty will enable Adwaita theme support.
# This will make `window-theme` work properly and will also allow Ghostty to properly respond to system theme changes,
# light/dark mode changing, etc.
# This requires a GTK4 desktop with a GTK4 theme.
#
# If you are running GTK3 or have a GTK3 theme,
# you may have to set this to false to get your theme picked up properly.
# Having this set to true with GTK3 should not cause any problems,
# but it may not work exactly as expected.
#
# This configuration only has an effect if Ghostty was built with Adwaita support.
gtk-adwaita = false

# Controls how long Ghostty will stay running after the last open surface has been closed.
# This only has an effect if `quit-after-last-window-closed` is also set to `true`.
#
# The minimum value for this configuration is `1s`.
# Any values lower than this will be clamped to `1s`.
#
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units.
# Each number and unit will be added together to form the total duration.
#
# The allowed time units are as follows:
#
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds.
#     No adjustments are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
#
# Examples:
#   * `1h30m`
#   * `45s`
#
# Units can be repeated and will be added together.
# This means that `1h1h` is equivalent to `2h`.
# This is confusing and should be avoided.
# A future update may disallow this.
#
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`.
# Any value larger than this will be clamped to the maximum value.
#
# By default `quit-after-last-window-closed-delay` is unset and
# Ghostty will quit immediately after the last window is closed if `quit-after-last-window-closed` is `true`.
#
# Only implemented on Linux.
quit-after-last-window-closed-delay =

initial-command = tmux
