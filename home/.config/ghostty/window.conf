# Horizontal window padding.
# This applies padding between the terminal cells and the left and right window borders.
# The value is in points, meaning that it will be scaled appropriately for screen DPI.
#
# If this value is set too large,
# the screen will render nothing,
# because the grid will be completely squished by the padding.
# It is up to you as the user to pick a reasonable value.
# If you pick an unreasonable value, a warning will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
#
# To set a different left and right padding,
# specify two numerical values separated by a comma.
# For example,
# `window-padding-x = 2,4` will set the left padding to 2 and the right padding to 4.
# If you want to set both paddings to the same value, you can use a single value.
# For example, `window-padding-x = 2` will set both paddings to 2.
window-padding-x = 2

# Vertical window padding.
# This applies padding between the terminal cells and the top and bottom window borders.
# The value is in points, meaning that it will be scaled appropriately for screen DPI.
#
# If this value is set too large,
# the screen will render nothing,
# because the grid will be completely squished by the padding.
# It is up to you as the user to pick a reasonable value.
# If you pick an unreasonable value, a warning will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
#
# To set a different top and bottom padding,
# specify two numerical values separated by a comma.
# For example, `window-padding-y = 2,4` will set the top padding to 2 and the bottom padding to 4.
# If you want to set both paddings to the same value, you can use a single value.
# For example, `window-padding-y = 2` will set both paddings to 2.
window-padding-y = 2

# The viewport dimensions are usually not perfectly divisible by the cell size.
# In this case, some extra padding on the end of a column and the bottom of the final row may exist.
# If this is `true`, then this extra padding is automatically balanced between all four edges to minimize imbalance on one side.
# If this is `false`, the top left grid cell will always hug the edge with zero padding other than what may be specified with the other `window-padding` options.
#
# If other `window-padding` fields are set and this is `true`, this will still apply.
# The other padding is applied first and may affect how many grid cells actually exist,
# and this is applied last in order to balance the padding given a certain viewport size and grid cell size.
window-padding-balance = false

# The color of the padding area of the window. Valid values are:
#
# * `background` - The background color specified in `background`.
# * `extend` - Extend the background color of the nearest grid cell.
# * `extend-always` - Same as "extend" but always extends without applying any of the heuristics that disable extending noted below.
#
# The "extend" value will be disabled in certain scenarios.
# On primary screen applications (i.e. not something like Neovim),
# the color will not be extended vertically if any of the following are true:
#
# * The nearest row has any cells that have the default background color.
#   The thinking is that in this case, the default background color looks fine as a padding color.
# * The nearest row is a prompt row (requires shell integration).
#   The thinking here is that prompts often contain powerline glyphs that do not look good extended.
# * The nearest row contains a perfect fit powerline character.
#   These don't look good extended.
#
window-padding-color = background

# If true, new windows and tabs will inherit the working directory of the previously focused window.
# If no window was previously focused, the default working directory will be used (the `working-directory` option).
window-inherit-working-directory = true

# If true, new windows and tabs will inherit the font size of the previously focused window.
# If no window was previously focused, the default font size will be used.
# If this is false, the default font size specified in the configuration `font-size` will be used.
window-inherit-font-size = true

# Valid values:
#
#   * `true`
#   * `false` - windows won't have native decorations, i.e. titlebar and
#      borders. On macOS this also disables tabs and tab overview.
#
# The "toggle_window_decorations" keybind action can be used to create a keybinding to toggle this setting at runtime.
#
# Changing this configuration in your configuration and reloading will only affect new windows. Existing windows will not be affected.
#
# macOS: To hide the titlebar without removing the native window borders or rounded corners,
# use `macos-titlebar-style = hidden` instead.
window-decoration = false

# The theme to use for the windows. Valid values:
#
#   * `auto` - Determine the theme based on the configured terminal background color.
#     This has no effect if the "theme" configuration has separate light and dark themes.
#     In that case, the behavior of "auto" is equivalent to "system".
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#   * `ghostty` - Use the background and foreground colors specified in the Ghostty configuration.
#     This is only supported on Linux builds with Adwaita and `gtk-adwaita` enabled.
#
# On macOS, if `macos-titlebar-style` is "tabs",
# the window theme will be automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows.
# This setting will still apply to non-terminal windows within Ghostty.
#
# This is currently only supported on macOS and Linux.
window-theme = auto

# The initial window size.
# This size is in terminal grid cells by default.
# Both values must be set to take effect.
# If only one value is set, it is ignored.
#
# We don't currently support specifying a size in pixels but a future change can enable that.
# If this isn't specified, the app runtime will determine some default size.
#
# Note that the window manager may put limits on the size or override the size.
# For example, a tiling window manager may force the window to be a certain size to fit within the grid.
# There is nothing Ghostty will do about this, but it will make an effort.
#
# Sizes larger than the screen size will be clamped to the screen size.
# This can be used to create a maximized-by-default window size.
#
# This will not affect new tabs, splits, or other nested terminal elements.
# This only affects the initial window size of any new window.
# Changing this value will not affect the size of the window after it has been created.
# This is only used for the initial size.
#
# BUG: On Linux with GTK, the calculated window size will not properly take into account window decorations.
# As a result, the grid dimensions will not exactly match this configuration.
# If window decorations are disabled (see window-decorations),
# then this will work as expected.
#
# Windows smaller than 10 wide by 4 high are not allowed.
window-height = 0
window-width = 0

# The position where new tabs are created. Valid values:
#
#   * `current` - Insert the new tab after the currently focused tab, or at the end if there are no focused tabs.
#
#   * `end` - Insert the new tab at the end of the tab list.
window-new-tab-position = current

# Confirms that a surface should be closed before closing it.
# This defaults to true.
# If set to false, surfaces will close without any confirmation.
confirm-close-surface = true

# Whether or not to quit after the last surface is closed.
#
# This defaults to `false` on macOS since that is standard behavior for a macOS application.
# On Linux, this defaults to `true` since that is generally expected behavior.
#
# On Linux, if this is `true`,
# Ghostty can delay quitting fully until a configurable amount of time has passed after the last window is closed.
# See the documentation of `quit-after-last-window-closed-delay`.
quit-after-last-window-closed = true

# This controls whether an initial window is created when Ghostty is run.
# Note that if `quit-after-last-window-closed` is `true` and `quit-after-last-window-closed-delay` is set,
# setting `initial-window` to `false` will mean that Ghostty will quit after the configured delay if no window is ever created.
# Only implemented on Linux and macOS.
initial-window = true

# Start new windows in fullscreen.
# This setting applies to new windows and does not apply to tabs, splits, etc.
# However, this setting will apply to all new windows, not just the first one.
#
# On macOS, this setting does not work if window-decoration is set to "false",
# because native fullscreen on macOS requires window decorations to be set.
fullscreen = false

# The title Ghostty will use for the window.
# This will force the title of the window to be this title at all times and Ghostty will ignore any set title escape sequences programs (such as Neovim) may send.
#
# If you want a blank title, set this to one or more spaces by quoting the value.
# For example, `title = " "`.
# This effectively hides the title.
# This is necessary because setting a blank value resets the title to the default value of the running program.
#
# This configuration can be reloaded at runtime.
# If it is set, the title will update for all windows.
# If it is unset, the next title change escape sequence will be honored but previous changes will not retroactively be set.
# This latter case may require you restart programs such as neovim to get the new title.
title =

