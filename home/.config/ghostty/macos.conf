# If anything other than false, fullscreen mode on macOS will not use the native fullscreen,
# but make the window fullscreen without animations and using a new space.
# It's faster than the native fullscreen mode since it doesn't use animations.
#
# Important: tabs DO NOT WORK in this mode.
# Non-native fullscreen removes the titlebar and macOS native tabs require the titlebar.
# If you use tabs, you should not use this mode.
#
# If you fullscreen a window with tabs, the currently focused tab will become fullscreen while the others will remain in a separate window in the background.
# You can switch to that window using normal window-switching keybindings such as command+tilde.
# When you exit fullscreen, the window will return to the tabbed state it was in before.
#
# Allowable values are:
#
#   * `visible-menu` - Use non-native macOS fullscreen, keep the menu bar visible
#   * `true` - Use non-native macOS fullscreen, hide the menu bar
#   * `false` - Use native macOS fullscreen
#
# Changing this option at runtime works, but will only apply to the next time the window is made fullscreen.
# If a window is already fullscreen, it will retain the previous setting until fullscreen is exited.
macos-non-native-fullscreen = true

# The style of the macOS titlebar.
# Available values are: "native", "transparent", "tabs", and "hidden".
#
# The "native" style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see `window-theme`).
#
# The "transparent" style is the same as "native" but the titlebar will be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less typical for a macOS application and may not work well with all themes.
#
# The "transparent" style will also update in real-time to dynamic changes to the window background color, i.e. via OSC 11.
# To make this more aesthetically pleasing, this only happens if the terminal is a window, tab, or split that borders the top of the window.
# This avoids a disjointed appearance where the titlebar color changes but all the topmost terminals don't match.
#
# The "tabs" style is a completely custom titlebar that integrates the tab bar into the titlebar.
# This titlebar always matches the background color of the terminal.
# There are some limitations to this style: On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not been tested.
#
# The "hidden" style hides the titlebar.
# Unlike `window-decoration = false`, however, it does not remove the frame from the window or cause it to have squared corners.
# Changing to or from this option at run-time may affect existing windows in buggy ways.
# The top titlebar area of the window will continue to drag the window around and you will not be able to use the mouse for terminal events in this space.
#
# The default value is "transparent".
# This is an opinionated choice but its one I think is the most aesthetically pleasing and works in most cases.
#
# Changing this option at runtime only applies to new windows.
macos-titlebar-style = hidden

# Whether the proxy icon in the macOS titlebar is visible.
# The proxy icon is the icon that represents the folder of the current working directory.
# You can see this very clearly in the macOS built-in Terminal.app titlebar.
#
# The proxy icon is only visible with the native macOS titlebar style.
#
# Valid values are:
#
#   * `visible` - Show the proxy icon.
#   * `hidden` - Hide the proxy icon.
#
# The default value is `visible`.
#
# This setting can be changed at runtime and will affect all currently open windows but only after their working directory changes again.
# Therefore, to make this work after changing the setting,
# you must usually `cd` to a different directory,
# open a different file in an editor, etc.
macos-titlebar-proxy-icon = hidden

# macOS doesn't have a distinct "alt" key and instead has the "option" key which behaves slightly differently.
# On macOS by default, the option key plus a character will sometimes produces a Unicode character.
# For example, on US standard layouts option-b produces "âˆ«".
# This may be undesirable if you want to use "option" as an "alt" key for keybindings in terminal programs or shells.
#
# This configuration lets you change the behavior so that option is treated as alt.
#
# The default behavior (unset) will depend on your active keyboard layout.
# If your keyboard layout is one of the keyboard layouts listed below,
# then the default value is "true".
# Otherwise, the default value is "false".
# Keyboard layouts with a default value of "true" are:
#
#   - U.S. Standard
#   - U.S. International
#
# Note that if an *Option*-sequence doesn't produce a printable character,
# it will be treated as *Alt* regardless of this setting.
# (i.e. `alt+ctrl+a`).
#
# Explicit values that can be set:
#
# If `true`, the *Option* key will be treated as *Alt*.
# This makes terminal sequences expecting *Alt* to work properly,
# but will break Unicode input sequences on macOS if you use them via the *Alt* key.
#
# You may set this to `false` to restore the macOS *Alt* key unicode sequences but this will break terminal sequences expecting *Alt* to work.
#
# The values `left` or `right` enable this for the left or right *Option* key, respectively.
#
# This does not work with GLFW builds.
macos-option-as-alt = true

# Whether to enable the macOS window shadow.
# The default value is true.
# With some window managers and window transparency settings, you may find false more visually appealing.
macos-window-shadow = false

# If true, Ghostty on macOS will automatically enable the "Secure Input" feature when it detects that a password prompt is being displayed.
#
# "Secure Input" is a macOS security feature that prevents applications from reading keyboard events.
# This can always be enabled manually using the `Ghostty > Secure Keyboard Entry` menu item.
#
# Note that automatic password prompt detection is based on heuristics and may not always work as expected.
# Specifically, it does not work over SSH connections,
# but there may be other cases where it also doesn't work.
#
# A reason to disable this feature is if you find that it is interfering with legitimate accessibility software (or software that uses the accessibility APIs),
# since secure input prevents any application from reading keyboard events.
macos-auto-secure-input = true

# If true, Ghostty will show a graphical indication when secure input is enabled.
# This indication is generally recommended to know when secure input is enabled.
#
# Normally, secure input is only active when a password prompt is displayed or it is manually (and typically temporarily) enabled.
# However, if you always have secure input enabled, the indication can be distracting and you may want to disable it.
macos-secure-input-indication = true

# Customize the macOS app icon.
#
# This only affects the icon that appears in the dock, application switcher, etc.
# This does not affect the icon in Finder because that is controlled by a hardcoded value in the signed application bundle and can't be changed at runtime.
# For more details on what exactly is affected,
# see the `NSApplication.icon` Apple documentation; that is the API that is being used to set the icon.
#
# Valid values:
#
#   * `official` - Use the official Ghostty icon.
#   * `custom-style` - Use the official Ghostty icon but with custom styles applied to various layers.
#     The custom styles must be specified using the additional `macos-icon`-prefixed configurations.
#     The `macos-icon-ghost-color` and `macos-icon-screen-color` configurations are required for this style.
#
# WARNING: The `custom-style` option is _experimental_.
# We may change the format of the custom styles in the future.
# We're still finalizing the exact layers and customization options that will be available.
#
# Other caveats:
#
#   * The icon in the update dialog will always be the official icon.
#     This is because the update dialog is managed through a separate framework and cannot be customized without significant effort.
#
macos-icon = official

# The material to use for the frame of the macOS app icon.
#
# Valid values:
#
#  * `aluminum` - A brushed aluminum frame. This is the default.
#  * `beige` - A classic 90's computer beige frame.
#  * `plastic` - A glossy, dark plastic frame.
#  * `chrome` - A shiny chrome frame.
#
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-frame = aluminum

# The color of the ghost in the macOS app icon.
#
# The format of the color is the same as the `background` configuration;
# see that for more information.
#
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
#
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-ghost-color =

# The color of the screen in the macOS app icon.
#
# The screen is a gradient so you can specify multiple colors that make up the gradient.
# Colors should be separated by commas.
# The format of the color is the same as the `background` configuration;
# see that for more information.
#
# Note: This configuration is required when `macos-icon` is set to `custom-style`.
#
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-screen-color =

# Control the auto-update functionality of Ghostty.
# This is only supported on macOS currently, since Linux builds are distributed via package managers that are not centrally controlled by Ghostty.
#
# Checking or downloading an update does not send any information to the project beyond standard network information mandated by the underlying protocols.
# To put it another way: Ghostty doesn't explicitly add any tracking to the update process.
# The update process works by downloading information about the latest version and comparing it client-side to the current version.
#
# Valid values are:
#
#   * `off` - Disable auto-updates.
#   * `check` - Check for updates and notify the user if an update is available,
#     but do not automatically download or install the update.
#   * `download` - Check for updates, automatically download the update,
#     notify the user, but do not automatically install the update.
#
# The default value is `check`.
#
# Changing this value at runtime works after a small delay.
auto-update = check

# The release channel to use for auto-updates.
#
# The default value of this matches the release channel of the currently running Ghostty version.
# If you download a pre-release version of Ghostty then this will be set to `tip` and you will receive pre-release updates.
# If you download a stable version of Ghostty then this will be set to `stable` and you will receive stable updates.
#
# Valid values are:
#
#   * `stable` - Stable, tagged releases such as "1.0.0".
#   * `tip` - Pre-release versions generated from each commit to the main branch.
#     This is the version that was in use during private beta testing by thousands of people.
#     It is generally stable but will likely have more bugs than the stable channel.
#
# Changing this configuration requires a full restart of Ghostty to take effect.
#
# This only works on macOS since only macOS has an auto-update feature.
auto-update-channel =

# A positive value enables blurring of the background when background-opacity is less than 1.
# The value is the blur radius to apply. A value of 20 is reasonable for a good looking blur.
# Higher values will cause strange rendering issues as well as performance issues.
#
# This is only supported on macOS.
background-blur-radius = 0

# Synchronize rendering with the screen refresh rate.
# If true, this will minimize tearing and align redraws with the screen but may cause input latency.
# If false, this will maximize redraw frequency but may cause tearing, and under heavy load may use more CPU and power.
#
# This defaults to true because out-of-sync rendering
# on macOS can cause kernel panics (macOS 14.4+) and performance issues for external displays over some hardware such as DisplayLink.
# If you want to minimize input latency,
# set this to false with the known aforementioned risks.
#
# Changing this value at runtime will only affect new terminals.
#
# This setting is only supported currently on macOS.
window-vsync = true

# The font that will be used for the application's window and tab titles.
#
# This is currently only supported on macOS.
window-title-font-family =

# The colorspace to use for the terminal window.
# The default is `srgb` but this can also be set to `display-p3` to use the Display P3 colorspace.
#
# Changing this value at runtime will only affect new windows.
#
# This setting is only supported on macOS.
window-colorspace = srgb

# Whether to enable saving and restoring window state.
# Window state includes their position, size, tabs, splits, etc.
# Some window state requires shell integration, such as preserving working directories.
# See `shell-integration` for more information.
#
# There are three valid values for this configuration:
#
#   * `default` will use the default system behavior.
#     On macOS, this will only save state if the application is forcibly terminated or if it is configured systemwide via Settings.app.
#
#   * `never` will never save window state.
#
#   * `always` will always save window state whenever Ghostty is exited.
#
# If you change this value to `never` while Ghostty is not running,
# the next Ghostty launch will NOT restore the window state.
#
# If you change this value to `default` while Ghostty is not running and the previous exit saved state,
# the next Ghostty launch will still restore the window state.
# This is because Ghostty cannot know if the previous exit was due to a forced save or not (macOS doesn't provide this information).
#
# If you change this value so that window state is saved while Ghostty is not running,
# the previous window state will not be restored because Ghostty only saves state on exit if this is enabled.
#
# The default value is `default`.
#
# This is currently only supported on macOS. This has no effect on Linux.
window-save-state = never

# Resize the window in discrete increments of the focused surface's cell size.
# If this is disabled, surfaces are resized in pixel increments.
# Currently only supported on macOS.
window-step-resize = false

# Draw fonts with a thicker stroke, if supported.
# This is only supported currently on macOS.
font-thicken = false
